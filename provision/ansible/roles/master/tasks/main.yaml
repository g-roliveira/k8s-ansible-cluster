- name: Encontra o IP do k8s-master
  set_fact:
    k8s_master_ip: "{{ item.ipaddress }}"
  when: item.name == 'k8s-master'
  with_items: "{{ k8s_machines }}"

- name: Encontra o Nome do k8s-master
  set_fact:
    k8s_master_name: "{{ item.hostname }}"
  when: item.name == 'k8s-master'
  with_items: "{{ k8s_machines }}"

- name: Remove swap do arquivo /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
  - swap
  - none

- name: Desativa o swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Encaminhando o IPv4 e permitindo que o iptables veja o tráfego em ponte
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: '{{ item }}'
    state: present
    create: yes
  with_items:
  - 'overlay'
  - 'br_netfilter'

- name: modprobe
  command: '{{ item }}'
  with_items:
  - 'modprobe br_netfilter'
  - 'modprobe overlay'

- name: Encaminhando o IPv4 e permitindo que o iptables veja o tráfego em ponte
  lineinfile:
    path: /etc/sysctl.d/k8s.conf
    line: '{{ item }}'
    state: present
    create: yes
  with_items:
  - 'net.bridge.bridge-nf-call-iptables   = 1'
  - 'net.bridge.bridge-nf-call-ip6tables  = 1'
  - 'net.ipv4.ip_forward                  = 1'

- name: update sysctl
  command: sysctl --system

- name: Adicionando chave de assinatura GPG do Docker
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Adiciona repositorio apt para versao estavel
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
    state: present

- name: Instalando o containerd runtime e suas dependencias
  apt:
    name: containerd.io
    state: present
    update_cache: yes
  notify: restart containerd

- name: Configurando containerd default.
  shell: |
    containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
  args:
    executable: bash

- name: Configurando containerd systemd para cgroup.
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: "SystemdCgroup = false"
    line: "            SystemdCgroup = true"
  notify: restart containerd

- name: Reiniciando e habilitando containerd
  systemd:
    name: containerd
    state: restarted
    enabled: yes

- name: Adiciona uma chave de assinatura apt para o Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adiciona repositorio apt para Kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: Instala os pacotes do Kubernetes
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - kubelet
    - kubeadm
    - kubectl
  notify: restart kubelet

- name: Configura no kubelet
  lineinfile:
    path: '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf'
    line: 'Environment="KUBELET_EXTRA_ARGS=--node-ip={{ k8s_master_ip }}"'
    regexp: 'KUBELET_EXTRA_ARGS='
    insertafter: '\[Service\]'
    state: present
  notify: restart kubelet

- name: Marcando pacotes do k8s como não atualizáveis(hold)
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
  - kubelet
  - kubeadm
  - kubectl

- name: Reinicia o kubelet
  service:
    name: kubelet
    daemon_reload: yes
    state: restarted

- name: Inicializa o cluster Kubernetes atraves da ferramenta kubeadm
  shell: >
    kubeadm init --apiserver-advertise-address="{{ k8s_master_ip }}" --apiserver-cert-extra-sans="{{ k8s_master_ip }}" --node-name "{{ k8s_master_name }}" --pod-network-cidr="{{ pod_network_cidr }}" --ignore-preflight-errors=all > /opt/init_cluster
  args:
    creates: /opt/init_cluster

- name: Cria o diretório .kube para o usuário vagrant
  file:
    path: "{{ ansible_user_home }}/.kube"
    state: directory
    mode: '0755'

- name: Configura o kubeconfig para o usuario vagrant
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_user_home }}/.kube/config"
    remote_src: yes

- name: Definir permissao de acesso ao arquivo config
  file:
    path: "{{ ansible_user_home }}/.kube/config"
    mode: '0644'

- name: Instala a rede calico no cluster
  become: false
  command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/"{{ calico_version }}"/manifests/calico.yaml

- name: Gera o comando para o join de novos nodes
  command: kubeadm token create --print-join-command
  register: join_command

- name: Escreve o comando do join em um arquivo no host de destino
  copy:
    content: "{{ join_command.stdout }}"
    dest: "/tmp/join-command"

- name: Copia o arquivo do host de destino para o host de controle
  fetch:
    src: "/tmp/join-command"
    dest: "files/join-command"
    flat: true

- name: Instala bash auto-completion e completion do kubectl
  include_tasks: autocompletion.yaml
